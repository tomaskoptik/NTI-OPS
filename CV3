#include "main.h"
DigitalOut myLed(LED1);
Mutex mutexLCD;
Mutex mutexParking;
std::stack<int> parkingSpots;

void initParkingSpots(int count) {
    for (int i = 0; i < count; ++i) {
        parkingSpots.push(i);
    }
}

Semafor::Semafor(int count) : slot(count) {}

void Semafor::acquire() {
    slot.acquire();
}

void Semafor::release() {
    slot.release();
}

int acquireParkingSpot() {
    mutexParking.lock(); 
    if (parkingSpots.empty()) {
        mutexParking.unlock();
        return -1; 
    }
    int spot = parkingSpots.top();
    parkingSpots.pop();
    mutexParking.unlock();
    return spot;
}

void releaseParkingSpot(int spot) {
    mutexParking.lock(); 
    parkingSpots.push(spot);
    mutexParking.unlock();
}

void clearParkingSpot(int parkingSpot) {
    int lineOffset = LINE(5) + 30 * parkingSpot;
    mutexLCD.lock();
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
    BSP_LCD_FillRect(0, lineOffset, BSP_LCD_GetXSize(), 30); 
    mutexLCD.unlock();
}

Car::Car(const char *name, int parkingTime, uint32_t bgColor, Semafor &semafor) 
    : car_name(name), parkTime(parkingTime), backgroundColor(bgColor), parkoviste(semafor) {}

void Car::operate() {
    while (true) {
        auto waitTime = milliseconds(rand() % 5000 + 3000);
        ThisThread::sleep_for(waitTime);

        parkoviste.acquire();

        int parkingSpot = acquireParkingSpot();
        if (parkingSpot != -1) {
            mutexLCD.lock();
            display(car_name, parkingSpot);
            mutexLCD.unlock();

            ThisThread::sleep_for(parkTime * 1s);

            mutexLCD.lock();
            clearParkingSpot(parkingSpot);
            mutexLCD.unlock();

            ThisThread::sleep_for(1s); 

            releaseParkingSpot(parkingSpot);
        }

        parkoviste.release();
    }
}

void Car::display(const char *name, int parkingSpot) {
    int lineOffset = LINE(5) + 30 * parkingSpot;
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
    BSP_LCD_SetBackColor(backgroundColor);
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
    BSP_LCD_DisplayStringAt(0, lineOffset, (uint8_t *)name, CENTER_MODE);
}

void initSystem() {
    srand((unsigned) time(NULL));
    BSP_LCD_Init();
    BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
    BSP_LCD_Clear(LCD_COLOR_BLACK);
    initParkingSpots(4);
}

void startCarThreads(Car cars[], Thread threads[], int numCars) {
    for (int i = 0; i < numCars; i++) {
        threads[i].start([&cars, i]() { cars[i].operate(); });
    }
}

int main() {
    
    initSystem();
    initParkingSpots(4);
    Semafor parkoviste(4);
    Car cars[] = {
        Car("CAR 1", 6, LCD_COLOR_RED, parkoviste),
        Car("CAR 2", 7, LCD_COLOR_GREEN, parkoviste),
        Car("CAR 3", 8, LCD_COLOR_BLUE, parkoviste),
        Car("CAR 4", 9, LCD_COLOR_YELLOW, parkoviste),
        Car("CAR 5", 8, LCD_COLOR_MAGENTA, parkoviste),
        Car("CAR 6", 7, LCD_COLOR_CYAN, parkoviste)
    };

    Thread threads[6];

    startCarThreads(cars, threads, 6);

    while (true) {
    }
}
