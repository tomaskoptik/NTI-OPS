#include "mbed.h"
#include "stm32746g_discovery_lcd.h"
#include <cstdlib>
#include <ctime>
#include <vector>
#include <chrono>

using namespace std::chrono;
using namespace std::chrono_literals;

DigitalOut myLed(LED1);
Mutex mutexLCD;
std::vector<bool> parkingSpots(4, true);

class Semafor {
public:
    Semafor(int count = 1) : slot(count) {}

    void acquire() {
        slot.acquire();
    }

    void release() {
        slot.release();
    }

private:
    Semaphore slot;
};

int acquireParkingSpot() {
    for (int i = 0; i < parkingSpots.size(); ++i) {
        if (parkingSpots[i]) {
            parkingSpots[i] = false;
            return i;
        }
    }
    return -1;
}

void releaseParkingSpot(int spot) {
    if (spot >= 0 && spot < parkingSpots.size()) {
        parkingSpots[spot] = true;
    }
}

void clearParkingSpot(int parkingSpot) {
    int lineOffset = LINE(5) + 30 * parkingSpot;
    mutexLCD.lock();
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
    BSP_LCD_FillRect(0, lineOffset, BSP_LCD_GetXSize(), 30); 
    mutexLCD.unlock();
}

class Car {
public:
    Car(const char *name, int parkingTime, uint32_t bgColor, Semafor &semafor) : 
        car_name(name), parkTime(parkingTime), backgroundColor(bgColor), parkoviste(semafor) {}

    void operate() {
        while (true) {
            auto waitTime = milliseconds(rand() % 5000 + 3000);
            ThisThread::sleep_for(waitTime);

            parkoviste.acquire();

            int parkingSpot = acquireParkingSpot();
            if (parkingSpot != -1) {
                mutexLCD.lock();
                display(car_name, parkingSpot);
                mutexLCD.unlock();

                ThisThread::sleep_for(parkTime * 1s);

                mutexLCD.lock();
                clearParkingSpot(parkingSpot);
                mutexLCD.unlock();

                releaseParkingSpot(parkingSpot);
            }

            parkoviste.release();

            ThisThread::sleep_for(2s);
        }
    }

private:
    const char *car_name;
    int parkTime;
    uint32_t backgroundColor;
    Semafor &parkoviste;

    void display(const char *name, int parkingSpot) {
        int lineOffset = LINE(5) + 30 * parkingSpot;
        BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
        BSP_LCD_SetBackColor(backgroundColor);
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
        BSP_LCD_DisplayStringAt(0, lineOffset, (uint8_t *)name, CENTER_MODE);
    }
};

Semafor parkoviste(4);

int main() {
    srand((unsigned) time(NULL));

    BSP_LCD_Init();
    BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
    BSP_LCD_Clear(LCD_COLOR_BLACK);

    Car cars[] = {
        Car("CAR 1", 3, LCD_COLOR_RED, parkoviste),
        Car("CAR 2", 4, LCD_COLOR_GREEN, parkoviste),
        Car("CAR 3", 2, LCD_COLOR_BLUE, parkoviste),
        Car("CAR 4", 5, LCD_COLOR_YELLOW, parkoviste),
        Car("CAR 5", 3, LCD_COLOR_MAGENTA, parkoviste),
        Car("CAR 6", 6, LCD_COLOR_CYAN, parkoviste)
    };

    Thread threads[6];

    for (int i = 0; i < 6; i++) {
        threads[i].start([&cars, i]() { cars[i].operate(); });
    }

    while (true) {
    }
}
